#!/bin/bash
set -ue

echo_pending() {
  echo -n "${1}... " >&2
}

echo_ok() {
  echo -e " \033[32m${1:-"ok"}\033[0m" >&2
}

echo_red() {
  echo -e "
\033[31m${1}\033[0m" >&2
}

echo_ko() {
  echo_red "${1:-"ko"}" >&2
  exit 1
}

help() {
  MESSAGE=${1:-""}
  EXIT_CODE=${2:-1}
  [[ -n "$MESSAGE" ]] && echo_red "$MESSAGE"
  echo "
$(basename "$0") [profile] [-h|--help] [-t|--time value] rotate your AWS credentials

This script will use exported AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY if they exist.
Otherwise, it'll try to use the one existing in the profile.
If profile is not provided, default profile will be used
You can directly source this file (it will export new credentials for you).

You may specify the delay before deleting the old key with -t|--time value[=]<value> (default to 30s).

AWS_SHARED_CREDENTIALS_FILE will also be taken into account.
" >&2
  exit "${EXIT_CODE}"
}

SOURCE_PROFILE="${1:-default}"
EMPIRICAL_DELAY_BEFORE_NEW_KEY_VALID=30

if [[ $# -gt 0 ]]
then
  set +u
  while :; do
    case $1 in
      -t|--time)
        if [ "$2" ]; then
          EMPIRICAL_DELAY_BEFORE_NEW_KEY_VALID=$2
          shift
        else
          help "$1 require a nuemerical value"
        fi
        help "" 0
        ;;
      -h|-\?|--help)
        help "" 0
        ;;
      *)
        SOURCE_PROFILE=${1#*=}
        break
      ;;
    esac
    shift
  done
fi

CREDENTIALS_FILE=${AWS_SHARED_CREDENTIALS_FILE:-$HOME/.aws/credentials}
PROFILES=($(awk '{if ($1 ~/\[/) print $1}' $CREDENTIALS_FILE | tr -d ']['))
[[ ! " ${PROFILES[@]} " =~ " ${SOURCE_PROFILE} " ]] && help "Profile $SOURCE_PROFILE not found in ${CREDENTIALS_FILE}" 1

set +u
if [[ -z "$AWS_ACCESS_KEY_ID" ]]
then
  AWS_ACCESS_KEY_ID=$(aws configure get aws_access_key_id  --profile "$SOURCE_PROFILE")
  [[ -z "$AWS_ACCESS_KEY_ID" ]] && help "AWS_ACCESS_KEY_ID empty, failed to source $SOURCE_PROFILE profile"
  export AWS_ACCESS_KEY_ID
fi
OLD_AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID

if [[ -z "$AWS_SECRET_ACCESS_KEY" ]]
then
  AWS_SECRET_ACCESS_KEY=$(aws configure get aws_secret_access_key --profile "$SOURCE_PROFILE")
  [[ -z "$AWS_SECRET_ACCESS_KEY" ]] && help "AWS_SECRET_ACCESS_KEY empty, failed to source $SOURCE_PROFILE profile"
  export AWS_SECRET_ACCESS_KEY
fi
OLD_AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
set -u


echo_pending "Creating your new keys (using $AWS_ACCESS_KEY_ID and $AWS_SECRET_ACCESS_KEY)"
ACCESS_KEY_JSON=$(aws iam create-access-key)

AWS_ACCESS_KEY_ID=$(echo "$ACCESS_KEY_JSON" | jq .AccessKey.AccessKeyId | tr -d '"')
AWS_SECRET_ACCESS_KEY=$(echo "$ACCESS_KEY_JSON" | jq .AccessKey.SecretAccessKey | tr -d '"')

[[ -z "$AWS_ACCESS_KEY_ID" ]] && echo_ko "AWS_ACCESS_KEY_ID empty, generation failed."
[[ -z "$AWS_SECRET_ACCESS_KEY" ]] && echo_ko "AWS_SECRET_ACCESS_KEY empty, generation failed."
echo_ok

echo_pending "Waiting $EMPIRICAL_DELAY_BEFORE_NEW_KEY_VALID seconds to avoid random errors while deleting your old keys"
for I in {1..30}
do
  echo -n " $I "  >&2
  sleep 1
done
echo_ok

echo_pending "Deleteting your old keys"
aws iam delete-access-key --access-key-id "$OLD_AWS_ACCESS_KEY_ID"

echo_pending "Updating your ${CREDENTIALS_FILE}"
sed -i.bak "s#${OLD_AWS_SECRET_ACCESS_KEY}#${AWS_SECRET_ACCESS_KEY}#g" "$CREDENTIALS_FILE" && rm "${CREDENTIALS_FILE}.bak"
sed -i.bak "s/${OLD_AWS_ACCESS_KEY_ID}/${AWS_ACCESS_KEY_ID}/g" "$CREDENTIALS_FILE" && rm "${CREDENTIALS_FILE}.bak"
echo_ok

echo "export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}"
echo "export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}"

